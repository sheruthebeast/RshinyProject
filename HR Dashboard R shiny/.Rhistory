Department D on E.DeptID=D.DeptID
left join
AgeGroup AG on E.AgeGroup=AG.AgeGroupID
left join
Education EDU on E.EduID=EDU.EduID
left join
Position P on E.PositionID=P.PositionID
left join
EEngagement_Tranf EE on EE.EmpID=E.EmpID
')
runApp()
runApp()
library(tidyverse)
library(dplyr)
library(tidyr)
library(sqldf)
library(RH2)
#Emp_Transf=transform(Emp_Transf,HireDate=as.Date(HireDate))
Emp_Transf=sqldf('Select E.EmpFullName,E.DateOfBirth,E.HireDate,E.Gender
,E.PayTypeID,E.TermDate,D.Department,
AG.AgeGroup,EDU.Education,P.Position,
case when E.HireDate is not null and  E.TermDate is NULL then 1 else 0 end HeadCount,
case when E.HireDate is not null or  E.TermDate is not NULL then 1 else 0 end Hires,
case when E.TermDate is not NULL then 1 else 0 end Termination
from
Emp E
left join
Department D on E.DeptID=D.DeptID
left join
AgeGroup AG on E.AgeGroup=AG.AgeGroupID
left join
Education EDU on E.EduID=EDU.EduID
left join
Position P on E.PositionID=P.PositionID
')
Emp_Transf$Year <- as.numeric(as.character(strftime(Emp_Transf$HireDate,format="%Y")))
Emp_Transf %>% group_by(Year) %>% summarize_at(c("Hires","Termination"),sum,na.rm=TRUE) %>%  pivot_longer(cols = c(Termination,Hires),
names_to = "Attribute",
values_to = "Value")
runApp()
library(tidyverse)
library(dplyr)
library(tidyr)
library(sqldf)
library(RH2)
#Emp_Transf=transform(Emp_Transf,HireDate=as.Date(HireDate))
#EEngagement_Tranf<-EEngagement %>%
pivot_longer(cols = 'Involved In Work (1-5)':'Satisfaction At Work(1-5)',
names_to = "Engagement",
values_to = "Score")
Emp_Transf=sqldf('Select E.EmpFullName,E.DateOfBirth,E.HireDate,E.Gender
,E.PayTypeID,E.TermDate,D.Department,
AG.AgeGroup,EDU.Education,P.Position,
EE.Engagement,
EE.SCore,
case when E.HireDate is not null and  E.TermDate is NULL then 1 else 0 end HeadCount,
case when E.HireDate is not null or  E.TermDate is not NULL then 1 else 0 end Hires,
case when E.TermDate is not NULL then 1 else 0 end Termination
from
Emp E
left join
Department D on E.DeptID=D.DeptID
left join
AgeGroup AG on E.AgeGroup=AG.AgeGroupID
left join
Education EDU on E.EduID=EDU.EduID
left join
Position P on E.PositionID=P.PositionID
left join
EEngagement_Tranf EE on EE.EmpID=E.EmpID
')
Emp_Transf$Year <- as.numeric(as.character(strftime(Emp_Transf$HireDate,format="%Y")))
Emp_Transf %>% group_by(Year) %>% summarize_at(c("Hires","Termination"),sum,na.rm=TRUE) %>%  pivot_longer(cols = c(Termination,Hires),
names_to = "Attribute",
values_to = "Value")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Emp_Transf %>%  group_by(Year) %>% summarise(Score =    mean(Score))
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
Emp_Transf %>% select(DateOfBirth) %>% filter(EmpFullName=='Joe Yang')
Emp_Transf %>% select(DateOfBirth) %>% filter(EmpFullName=="Joe Yang")
Emp_Transf %>% select(DateOfBirth) %>% filter(Emp_Transf$EmpFullName=="Joe Yang")
Emp_Transf %>% select(DateOfBirth) %>% filter(Emp_Transf$EmpFullName="Joe Yang")
Emp_Transf %>% select(DateOfBirth) %>% filter(Emp_Transf$EmpFullName=="Christy Zhu")
runApp()
Emp_Transf$YearC <- as.character(strftime(Emp_Transf$HireDate,format="%Y"))
runApp()
runApp()
library(readxl)
Absence <- read_excel("C:/Users/Dell/Desktop/HR Dashboard/HR_Department/HRdashboard.xlsx",
sheet = "Absence")
View(Absence)
sqldf('Select E.EmpFullName,E.DateOfBirth,E.HireDate,E.Gender
,E.PayTypeID,E.TermDate,D.Department,
AG.AgeGroup,EDU.Education,P.Position,
EE.Engagement,
EE.SCore,
case when A.AbsentType="Uncertified Sick Leave" then
DATEDIFF(Absence[AbsenceStartDate],Absence[AbsenceEndDate],DAY) else 0 end SickLeave,
case when E.HireDate is not null and  E.TermDate is NULL then 1 else 0 end HeadCount,
case when E.HireDate is not null or  E.TermDate is not NULL then 1 else 0 end Hires,
case when E.TermDate is not NULL then 1 else 0 end Termination
from
Emp E
left join
Department D on E.DeptID=D.DeptID
left join
AgeGroup AG on E.AgeGroup=AG.AgeGroupID
left join
Education EDU on E.EduID=EDU.EduID
left join
Position P on E.PositionID=P.PositionID
left join
EEngagement_Tranf EE on EE.EmpID=E.EmpID
left join
Absence A on A.EmpID=E.EmpID
')
library(sqldf)
library(tidyverse)
library(dplyr)
library(tidyr)
library(sqldf)
library(RH2)
sqldf('Select E.EmpFullName,E.DateOfBirth,E.HireDate,E.Gender
,E.PayTypeID,E.TermDate,D.Department,
AG.AgeGroup,EDU.Education,P.Position,
EE.Engagement,
EE.SCore,
case when A.AbsentType="Uncertified Sick Leave" then
DATEDIFF(Absence[AbsenceStartDate],Absence[AbsenceEndDate],DAY) else 0 end SickLeave,
case when E.HireDate is not null and  E.TermDate is NULL then 1 else 0 end HeadCount,
case when E.HireDate is not null or  E.TermDate is not NULL then 1 else 0 end Hires,
case when E.TermDate is not NULL then 1 else 0 end Termination
from
Emp E
left join
Department D on E.DeptID=D.DeptID
left join
AgeGroup AG on E.AgeGroup=AG.AgeGroupID
left join
Education EDU on E.EduID=EDU.EduID
left join
Position P on E.PositionID=P.PositionID
left join
EEngagement_Tranf EE on EE.EmpID=E.EmpID
left join
Absence A on A.EmpID=E.EmpID
')
sqldf('Select E.EmpFullName,E.DateOfBirth,E.HireDate,E.Gender
,E.PayTypeID,E.TermDate,D.Department,
AG.AgeGroup,EDU.Education,P.Position,
EE.Engagement,
EE.SCore,
case when A.AbsentType="Uncertified Sick Leave" then
DATEDIFF(Absence[AbsenceStartDate],Absence[AbsenceEndDate],DAY) else 0 end SickLeave,
case when E.HireDate is not null and  E.TermDate is NULL then 1 else 0 end HeadCount,
case when E.HireDate is not null or  E.TermDate is not NULL then 1 else 0 end Hires,
case when E.TermDate is not NULL then 1 else 0 end Termination
from
Emp E
left join
Department D on E.DeptID=D.DeptID
left join
AgeGroup AG on E.AgeGroup=AG.AgeGroupID
left join
Education EDU on E.EduID=EDU.EduID
left join
Position P on E.PositionID=P.PositionID
left join
EEngagement_Tranf EE on EE.EmpID=E.EmpID
left join
Absence A on A.EmpID=E.EmpID
')
sqldf('Select E.EmpFullName,E.DateOfBirth,E.HireDate,E.Gender
,E.PayTypeID,E.TermDate,D.Department,
AG.AgeGroup,EDU.Education,P.Position,
EE.Engagement,
EE.SCore,
case when A.AbsentType="Uncertified Sick Leave" then
DATEDIFF(A.AbsenceStartDate,A.AbsenceEndDate,DAY) else 0 end SickLeave,
case when E.HireDate is not null and  E.TermDate is NULL then 1 else 0 end HeadCount,
case when E.HireDate is not null or  E.TermDate is not NULL then 1 else 0 end Hires,
case when E.TermDate is not NULL then 1 else 0 end Termination
from
Emp E
left join
Department D on E.DeptID=D.DeptID
left join
AgeGroup AG on E.AgeGroup=AG.AgeGroupID
left join
Education EDU on E.EduID=EDU.EduID
left join
Position P on E.PositionID=P.PositionID
left join
EEngagement_Tranf EE on EE.EmpID=E.EmpID
left join
Absence A on A.EmpID=E.EmpID
')
sqldf('Select E.EmpFullName,E.DateOfBirth,E.HireDate,E.Gender
,E.PayTypeID,E.TermDate,D.Department,
AG.AgeGroup,EDU.Education,P.Position,
EE.Engagement,
EE.SCore,
case when A.AbsenceType="Uncertified Sick Leave" then
DATEDIFF(A.AbsenceStartDate,A.AbsenceEndDate,DAY) else 0 end SickLeave,
case when E.HireDate is not null and  E.TermDate is NULL then 1 else 0 end HeadCount,
case when E.HireDate is not null or  E.TermDate is not NULL then 1 else 0 end Hires,
case when E.TermDate is not NULL then 1 else 0 end Termination
from
Emp E
left join
Department D on E.DeptID=D.DeptID
left join
AgeGroup AG on E.AgeGroup=AG.AgeGroupID
left join
Education EDU on E.EduID=EDU.EduID
left join
Position P on E.PositionID=P.PositionID
left join
EEngagement_Tranf EE on EE.EmpID=E.EmpID
left join
Absence A on A.EmpID=E.EmpID
')
sqldf('Select E.EmpFullName,E.DateOfBirth,E.HireDate,E.Gender
,E.PayTypeID,E.TermDate,D.Department,
AG.AgeGroup,EDU.Education,P.Position,
EE.Engagement,
EE.SCore,
case when A.AbsenceType="Uncertified Sick Leave" then
A.AbsenceStartDate-A.AbsenceEndDate else 0 end SickLeave,
case when E.HireDate is not null and  E.TermDate is NULL then 1 else 0 end HeadCount,
case when E.HireDate is not null or  E.TermDate is not NULL then 1 else 0 end Hires,
case when E.TermDate is not NULL then 1 else 0 end Termination
from
Emp E
left join
Department D on E.DeptID=D.DeptID
left join
AgeGroup AG on E.AgeGroup=AG.AgeGroupID
left join
Education EDU on E.EduID=EDU.EduID
left join
Position P on E.PositionID=P.PositionID
left join
EEngagement_Tranf EE on EE.EmpID=E.EmpID
left join
Absence A on A.EmpID=E.EmpID
')
Emp_Transf=sqldf('Select E.EmpFullName,E.DateOfBirth,E.HireDate,E.Gender
,E.PayTypeID,E.TermDate,D.Department,
AG.AgeGroup,EDU.Education,P.Position,
EE.Engagement,
EE.SCore,
case when A.AbsenceType="Uncertified Sick Leave" then
A.AbsenceStartDate-A.AbsenceEndDate else 0 end SickLeave,
case when E.HireDate is not null and  E.TermDate is NULL then 1 else 0 end HeadCount,
case when E.HireDate is not null or  E.TermDate is not NULL then 1 else 0 end Hires,
case when E.TermDate is not NULL then 1 else 0 end Termination
from
Emp E
left join
Department D on E.DeptID=D.DeptID
left join
AgeGroup AG on E.AgeGroup=AG.AgeGroupID
left join
Education EDU on E.EduID=EDU.EduID
left join
Position P on E.PositionID=P.PositionID
left join
EEngagement_Tranf EE on EE.EmpID=E.EmpID
left join
Absence A on A.EmpID=E.EmpID
')
class(absence)
class(Absence)
str(class)
str(Absence)
Emp_Transf=sqldf('Select E.EmpFullName,E.DateOfBirth,E.HireDate,E.Gender
,E.PayTypeID,E.TermDate,D.Department,
AG.AgeGroup,EDU.Education,P.Position,
EE.Engagement,
EE.SCore,
case when A.AbsenceType="Uncertified Sick Leave" then
(A.AbsenceEndDate-A.AbsenceStartDate)/(3600*24) else 0 end SickLeave,
case when E.HireDate is not null and  E.TermDate is NULL then 1 else 0 end HeadCount,
case when E.HireDate is not null or  E.TermDate is not NULL then 1 else 0 end Hires,
case when E.TermDate is not NULL then 1 else 0 end Termination
from
Emp E
left join
Department D on E.DeptID=D.DeptID
left join
AgeGroup AG on E.AgeGroup=AG.AgeGroupID
left join
Education EDU on E.EduID=EDU.EduID
left join
Position P on E.PositionID=P.PositionID
left join
EEngagement_Tranf EE on EE.EmpID=E.EmpID
left join
Absence A on A.EmpID=E.EmpID
')
Emp_Transf=sqldf('Select E.EmpFullName,E.DateOfBirth,E.HireDate,E.Gender
,E.PayTypeID,E.TermDate,D.Department,
AG.AgeGroup,EDU.Education,P.Position,
EE.Engagement,
EE.SCore,
case when A.AbsenceType="Uncertified Sick Leave" then
(A.AbsenceEndDate-A.AbsenceStartDate)/(3600*24) else 0 end SickLeave,
case when A.AbsenceType="Holiday" then
(A.AbsenceEndDate-A.AbsenceStartDate)/(3600*24) else 0 end VacationLeave,
case when E.HireDate is not null and  E.TermDate is NULL then 1 else 0 end HeadCount,
case when E.HireDate is not null or  E.TermDate is not NULL then 1 else 0 end Hires,
case when E.TermDate is not NULL then 1 else 0 end Termination
from
Emp E
left join
Department D on E.DeptID=D.DeptID
left join
AgeGroup AG on E.AgeGroup=AG.AgeGroupID
left join
Education EDU on E.EduID=EDU.EduID
left join
Position P on E.PositionID=P.PositionID
left join
EEngagement_Tranf EE on EE.EmpID=E.EmpID
left join
Absence A on A.EmpID=E.EmpID
')
Emp_Transf %>% pivot_longer(cols = c(SickLeave,VacationLeave),
names_to = "Attribute",
values_to = "Value")
Emp_Transf %>% group_by(YearC) %>% summarize_at(c("SickLeave","VacationLeave"),sum,na.rm=TRUE) %>%  pivot_longer(cols = c(SickLeave,VacationLeave),
names_to = "Attribute",
values_to = "Value")
Emp_Transf %>% group_by(Year) %>% summarize_at(c("Hires","Termination"),sum,na.rm=TRUE) %>%  pivot_longer(cols = c(Termination,Hires),
names_to = "Attribute",
values_to = "Value")
Emp_Transf$Year <- as.numeric(as.character(strftime(Emp_Transf$HireDate,format="%Y")))
Emp_Transf$YearC <- as.character(strftime(Emp_Transf$HireDate,format="%Y"))
Emp_Transf %>% group_by(YearC) %>% summarize_at(c("SickLeave","VacationLeave"),sum,na.rm=TRUE) %>%  pivot_longer(cols = c(SickLeave,VacationLeave),
names_to = "Attribute",
values_to = "Value")
shiny::runApp()
Emp_Transf %>% group_by(YearC) %>% summarize_at(c("SickLeave","VacationLeave"),sum,na.rm=TRUE) %>%  pivot_longer(cols = c(SickLeave,VacationLeave),
names_to = "Attribute",
values_to = "Value")
runApp()
runApp()
shiny::runApp()
Emp_Transf %>% group_by(YearC) %>% summarise(Score =round(mean(Score),2))
Emp_Transf %>% group_by(YearC,EmpFullName) %>% summarise(Score =round(mean(Score),2))
runApp()
group_by(YearC) %>% summarize_at(c("SickLeave","VacationLeave"),sum,na.rm=TRUE) %>%  pivot_longer(cols = c(SickLeave,VacationLeave),
names_to = "Attribute",
values_to = "Value")
Emp_Transf %>% group_by(YearC) %>% summarize_at(c("SickLeave","VacationLeave"),sum,na.rm=TRUE) %>%  pivot_longer(cols = c(SickLeave,VacationLeave),
names_to = "Attribute",
values_to = "Value")
runApp()
Emp_Transf %>% unique(select(DateOfBirth)) %>% filter(Emp_Transf$EmpFullName %in% input$SelectEmployee )
Emp_Transf %>% unique(select(Emp_Transf$DateOfBirth)) %>% filter(Emp_Transf$EmpFullName %in% input$SelectEmployee )
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
emp_transf %>% select(Emp_Transf$DateOfBirth) %>% distinct()
Emp_Transf%>% select(Emp_Transf$DateOfBirth) %>% distinct()
Emp_Transf%>% select(Emp_Transf$DateOfBirth)
Emp_Transf %>% select(DateOfBirth)
Emp_Transf %>% select(DateOfBirth) %>% distinct()
Emp_Transf %>% select(DateOfBirth) %>% unique()
Emp_Transf %>% select(DateOfBirth) %>% filter(Emp_Transf,EmpFullName=='Jon Yang')
Emp_Transf %>% select(DateOfBirth) %>% filter(Emp_Transf,Emp_Transf$EmpFullName =='Jon Yang')
Emp_Transf %>% select(DateOfBirth) %>% filter(Emp_Transf,Emp_Transf$EmpFullName =="Jon Yang")
Emp_Transf %>% select(DateOfBirth) %>% filter(Emp_Transf,Emp_Transf$EmpFullName ="Jon Yang")
Emp_Transf %>% filter(Emp_Transf,Emp_Transf$EmpFullName =="Jon Yang")
Emp_Transf %>% filter(Emp_Transf,EmpFullName =="Jon Yang")
Emp_Transf %>% filter(EmpFullName =="Jon Yang")
Emp_Transf %>% filter(EmpFullName =="Jon Yang") %>% select(EmpFullName)
Emp_Transf %>% filter(EmpFullName =="Jon Yang") %>% select(EmpFullName) %>% distinct()
runApp()
shiny::runApp()
runApp()
Emp_Transf$DateOfBirthTransf <- as.character(strftime(Emp_Transf$HireDate,format="%Y-%M-%D"))
Emp_Transf$DateOfBirthTransf <- as.character(strftime(Emp_Transf$DateOfBirth,format="%Y-%M-%D"))
Emp_Transf$DateOfBirthTransf <- as.character(strftime(Emp_Transf$DateOfBirth,format="%Y-%mm-%dd"))
Emp_Transf$DateOfBirthTransf <- as.character(strftime(Emp_Transf$DateOfBirth,format="%y-%m-%d"))
Emp_Transf$DateOfBirthTransf <- as.character(strftime(Emp_Transf$DateOfBirth,format="%Y-%m-%d"))
runApp()
runApp()
Emp_Transf %>% filter(Year = 2017) %>% sum(Emp_Transf$HeadCount)
Emp_Transf %>% filter(Year == 2017) %>% sum(Emp_Transf$HeadCount)
Emp_Transf %>% filter(Year == 2017) %>%  select(DateOfBirthTransf)
Emp_Transf %>% filter(Year == 2017) %>%  select(HeadCount)
Emp_Transf %>% filter(Year == 2017) %>%  select(HeadCount) %>% sum(HeadCount)
Emp_Transf %>% filter(Year == 2017) %>%  summarise(Emp_Transf,sum(HeadCount))
Emp_Transf %>% filter(Year == 2017) %>%  select(HeadCount) %>% summarise(Emp_Transf,sum(HeadCount))
Emp_Transf %>% filter(Year == 2017) %>%  select(HeadCount) %>% summarise(HeadCountNew,sum(HeadCount))
Emp_Transf %>% filter(Year == 2017) %>%  select(HeadCount) %>% summarise(HeadCount,sum(HeadCount))
Emp_Transf %>% filter(Year == 2017) %>%  group_by(HeadCount)
Emp_Transf %>% filter(Year == 2017) %>%  group_by(HeadCount) %>% summarise(Sum,sum(HeadCount))
Emp_Transf %>% filter(Year == 2017) %>%  group_by(HeadCount) %>% summarise(SumNew,sum(HeadCount))
Emp_Transf %>% filter(Year == 2017) %>%  mutate(HedCoun=Sum(HeadCount))
Emp_Transf %>% filter(Year == 2017) %>%  mutate(HedCoun=sum(HeadCount))
Emp_Transf %>% filter(Year == 2017) %>%  mutate(HedCoun=sum(HeadCount)) %>% select(HedCoun)
Emp_Transf %>% filter(Year == 2017) %>%  mutate(HedCoun=sum(HeadCount)) %>% select(HedCoun) %>% distinct()
Emp_Transf %>% filter(Year == 2017) %>%  mutate(HeadCount=sum(HeadCount)) %>% select(HeadCount) %>% distinct()
runApp()
Emp_Transf=sqldf('Select distinct E.EmpFullName,E.DateOfBirth,E.HireDate,E.Gender
,E.PayTypeID,E.TermDate,D.Department,
AG.AgeGroup,EDU.Education,P.Position,
EE.Engagement,
EE.SCore,
case when A.AbsenceType="Uncertified Sick Leave" then
(A.AbsenceEndDate-A.AbsenceStartDate)/(3600*24) else 0 end SickLeave,
case when A.AbsenceType="Holiday" then
(A.AbsenceEndDate-A.AbsenceStartDate)/(3600*24) else 0 end VacationLeave,
case when E.HireDate is not null and  E.TermDate is NULL then 1 else 0 end HeadCount,
case when E.HireDate is not null or  E.TermDate is not NULL then 1 else 0 end Hires,
case when E.TermDate is not NULL then 1 else 0 end Termination
from
Emp E
left join
Department D on E.DeptID=D.DeptID
left join
AgeGroup AG on E.AgeGroup=AG.AgeGroupID
left join
Education EDU on E.EduID=EDU.EduID
left join
Position P on E.PositionID=P.PositionID
left join
EEngagement_Tranf EE on EE.EmpID=E.EmpID
left join
Absence A on A.EmpID=E.EmpID
')
runApp()
Emp_Transf$YearC <- as.character(strftime(Emp_Transf$HireDate,format="%Y"))
Emp_Transf$DateOfBirthTransf <- as.character(strftime(Emp_Transf$DateOfBirth,format="%Y-%m-%d"))
Emp_Transf$Year <- as.numeric(as.character(strftime(Emp_Transf$HireDate,format="%Y")))
runApp()
turnOver=paste(round((sum(Emp_Transf$Termination)/sum(Emp_Transf$HeadCount))*100,1),"%",sep = " ")
Emp_Transf %>% filter(Year ==2017)  %>% select(turnOver) %>% distinct()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Emp_Transf$HireDateTransf<- as.character(strftime(Emp_Transf$HireDate,format="%Y-%m-%d"))
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
View(EEngagement)
View(EEngagement)
View(Absence)
View(AgeGroup)
View(Department)
View(Education)
View(EEngagement)
View(Emp)
View(Position)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
install.packages('RJava')
runApp()
install.packages('RH2')
runApp()
runApp()
runApp()
shiny::runApp()
View(Emp)
